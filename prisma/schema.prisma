// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  originalUrl String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  results OptimizationResult[]

  @@index([userId])
}

model OptimizationResult {
  id              String   @id @default(uuid())
  projectId       String
  optimizedUrl    String?
  status          String   @default("pending") // pending, processing, completed, failed
  performanceData String?  // JSON string of performance metrics
  filesData       String?  // JSON string of file size breakdown
  networkData     String?  // JSON string of network waterfall
  aiInsights      String?  // JSON string of AI insights
  errorMessage    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([status])
}

model ClonedPage {
  id              String   @id @default(uuid())
  userId          String
  sourceUrl       String
  sourceTitle     String?
  pageData        String   // JSON string of cloned page content
  creditsConsumed Int      @default(1)
  status          String   @default("copied") // copied, failed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  pasteSessions PasteSession[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model PasteSession {
  id              String    @id @default(uuid())
  clonedPageId    String
  pasteCode       String    @unique
  userId          String
  status          String    @default("pending") // pending, active, completed, failed, expired
  destinationUrl  String?
  elementsCount   Int?
  errors          String?   // JSON string of errors
  warnings        String?   // JSON string of warnings
  expiresAt       DateTime
  completedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  clonedPage ClonedPage @relation(fields: [clonedPageId], references: [id], onDelete: Cascade)

  @@index([clonedPageId])
  @@index([pasteCode])
  @@index([userId])
  @@index([status])
  @@index([expiresAt])
}
